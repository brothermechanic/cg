From 524cd9dd48af8c2278b56a2a5c467518e0d09d07 Mon Sep 17 00:00:00 2001
From: Dmitry Tsarevich <dimhotepus@gmail.com>
Date: Fri, 13 Jan 2023 20:33:38 +0400
Subject: [PATCH 1/3] [tf] Pass int as fprintf width specifier

Passing std::atomic<int> is UB
---
 pxr/base/tf/debug.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/pxr/base/tf/debug.cpp b/pxr/base/tf/debug.cpp
index f26c9e9695..3719f07a6c 100644
--- a/pxr/base/tf/debug.cpp
+++ b/pxr/base/tf/debug.cpp
@@ -444,12 +444,12 @@ TfDebug::_ScopedOutput(bool start, const char* str)
     FILE *outputFile = _GetOutputFile().load();
     
     if (start) {
-        fprintf(outputFile, "%*s%s --{\n", 2 * stackDepth, "", str);
+        fprintf(outputFile, "%*s%s --{\n", 2 * static_cast<int>(stackDepth), "", str);
         ++stackDepth;
     }
     else {
         --stackDepth;
-        fprintf(outputFile, "%*s}-- %s\n", 2 * stackDepth, "", str);
+        fprintf(outputFile, "%*s}-- %s\n", 2 * static_cast<int>(stackDepth), "", str);
     }
 }
 

From 5aac25649b3fe607dec30563612fa902af04ba30 Mon Sep 17 00:00:00 2001
From: Dmitry Tsarevich <dimhotepus@gmail.com>
Date: Fri, 13 Jan 2023 21:02:30 +0400
Subject: [PATCH 2/3] [tf] Seek for ':' instead of ":" for performance

---
 pxr/base/tf/stringUtils.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/pxr/base/tf/stringUtils.cpp b/pxr/base/tf/stringUtils.cpp
index 19f20f4fc3..8947385e69 100644
--- a/pxr/base/tf/stringUtils.cpp
+++ b/pxr/base/tf/stringUtils.cpp
@@ -333,7 +333,7 @@ TfGetBaseName(const string& fileName)
     // fileName was already basename, in which case we want to return the
     // string back.
     if (result == wfileName.c_str()) {
-        const bool hasDriveLetter = fileName.find(":") != string::npos;
+        const bool hasDriveLetter = fileName.find(':') != string::npos;
         const bool hasPathSeparator  = i != string::npos;
         if (hasDriveLetter || hasPathSeparator) {
             return std::string();

From 6ce0b2d0bd4f149147c2f883f23270dc67a2fccd Mon Sep 17 00:00:00 2001
From: Dmitry Tsarevich <dimhotepus@gmail.com>
Date: Fri, 13 Jan 2023 23:45:35 +0400
Subject: [PATCH 3/3] [tf] Optimize string length computation

---
 pxr/base/tf/mallocTag.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/pxr/base/tf/mallocTag.cpp b/pxr/base/tf/mallocTag.cpp
index 3fd235e9ab..4fcd186f7e 100644
--- a/pxr/base/tf/mallocTag.cpp
+++ b/pxr/base/tf/mallocTag.cpp
@@ -246,7 +246,7 @@ Tf_MallocTagStringMatchTable::Match(const char* s) const
 struct Tf_MallocCallSite
 {
     Tf_MallocCallSite(const string& name)
-        : _name(std::make_unique<char []>(strlen(name.c_str()) + 1))
+        : _name(std::make_unique<char []>(name.length() + 1))
         , _totalBytes(0)
         , _flags(
             (Tf_MatchesMallocTagDebugName(name) ? _DebugFlag : 0) |
